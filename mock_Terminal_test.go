// Code generated by mockery v2.28.1. DO NOT EDIT.

package main

import mock "github.com/stretchr/testify/mock"

// MockTerminal is an autogenerated mock type for the Terminal type
type MockTerminal struct {
	mock.Mock
}

type MockTerminal_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTerminal) EXPECT() *MockTerminal_Expecter {
	return &MockTerminal_Expecter{mock: &_m.Mock}
}

// CallMethod provides a mock function with given fields: name, params
func (_m *MockTerminal) CallMethod(name string, params ...interface{}) (Result, error) {
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 Result
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (Result, error)); ok {
		return rf(name, params...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) Result); ok {
		r0 = rf(name, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Result)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(name, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTerminal_CallMethod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallMethod'
type MockTerminal_CallMethod_Call struct {
	*mock.Call
}

// CallMethod is a helper method to define mock.On call
//   - name string
//   - params ...interface{}
func (_e *MockTerminal_Expecter) CallMethod(name interface{}, params ...interface{}) *MockTerminal_CallMethod_Call {
	return &MockTerminal_CallMethod_Call{Call: _e.mock.On("CallMethod",
		append([]interface{}{name}, params...)...)}
}

func (_c *MockTerminal_CallMethod_Call) Run(run func(name string, params ...interface{})) *MockTerminal_CallMethod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockTerminal_CallMethod_Call) Return(result Result, err error) *MockTerminal_CallMethod_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockTerminal_CallMethod_Call) RunAndReturn(run func(string, ...interface{}) (Result, error)) *MockTerminal_CallMethod_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockTerminal interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTerminal creates a new instance of MockTerminal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTerminal(t mockConstructorTestingTNewMockTerminal) *MockTerminal {
	mock := &MockTerminal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
